# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: subjects.sql
import dataclasses
from typing import AsyncIterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from . import models


CREATE_SUBJECT = """-- name: create_subject \\:one
INSERT INTO subjects ("name", "facultyId", "aisid", "stage", "semester")
VALUES (:p1,:p2,:p3,:p4,:p5)
RETURNING "id"
"""


@dataclasses.dataclass()
class createSubjectParams:
    name: str
    facultyId: int
    aisid: Optional[int]
    stage: int
    semester: int


GET_SUBJECT_BY_ID = """-- name: get_subject_by_id \\:one
SELECT id, name, "facultyId", aisid, stage, semester FROM subjects WHERE "id"=:p1
"""


GET_SUBJECT_BY_SEMESTER = """-- name: get_subject_by_semester \\:many
SELECT id, name, "facultyId", aisid, stage, semester FROM subjects WHERE "semester"=:p1
"""


GET_SUBJECT_BY_SEMESTER_FACULTY_STAGE = """-- name: get_subject_by_semester_faculty_stage \\:many
SELECT id, name, "facultyId", aisid, stage, semester FROM subjects WHERE "semester"=:p1 AND "facultyId"=:p2 AND "stage"=:p3
"""


GET_SUBJECTS = """-- name: get_subjects \\:many
SELECT id, name, "facultyId", aisid, stage, semester FROM subjects
"""


GET_SUBJECTS_BY_FACULTY = """-- name: get_subjects_by_faculty \\:many
SELECT id, name, "facultyId", aisid, stage, semester FROM subjects WHERE "facultyId"=:p1
"""


GET_SUBJECTS_BY_STAGE = """-- name: get_subjects_by_stage \\:many
SELECT id, name, "facultyId", aisid, stage, semester FROM subjects WHERE "stage"=:p1
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_subject(self, arg: createSubjectParams) -> Optional[int]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_SUBJECT), {
            "p1": arg.name,
            "p2": arg.facultyId,
            "p3": arg.aisid,
            "p4": arg.stage,
            "p5": arg.semester,
        })).first()
        if row is None:
            return None
        return row[0]

    async def get_subject_by_id(self, *, id: int) -> Optional[models.Subject]:
        row = (await self._conn.execute(sqlalchemy.text(GET_SUBJECT_BY_ID), {"p1": id})).first()
        if row is None:
            return None
        return models.Subject(
            id=row[0],
            name=row[1],
            facultyId=row[2],
            aisid=row[3],
            stage=row[4],
            semester=row[5],
        )

    async def get_subject_by_semester(self, *, semester: int) -> AsyncIterator[models.Subject]:
        result = await self._conn.stream(sqlalchemy.text(GET_SUBJECT_BY_SEMESTER), {"p1": semester})
        async for row in result:
            yield models.Subject(
                id=row[0],
                name=row[1],
                facultyId=row[2],
                aisid=row[3],
                stage=row[4],
                semester=row[5],
            )

    async def get_subject_by_semester_faculty_stage(self, *, semester: int, facultyId: int, stage: int) -> AsyncIterator[models.Subject]:
        result = await self._conn.stream(sqlalchemy.text(GET_SUBJECT_BY_SEMESTER_FACULTY_STAGE), {"p1": semester, "p2": facultyId, "p3": stage})
        async for row in result:
            yield models.Subject(
                id=row[0],
                name=row[1],
                facultyId=row[2],
                aisid=row[3],
                stage=row[4],
                semester=row[5],
            )

    async def get_subjects(self) -> AsyncIterator[models.Subject]:
        result = await self._conn.stream(sqlalchemy.text(GET_SUBJECTS))
        async for row in result:
            yield models.Subject(
                id=row[0],
                name=row[1],
                facultyId=row[2],
                aisid=row[3],
                stage=row[4],
                semester=row[5],
            )

    async def get_subjects_by_faculty(self, *, facultyId: int) -> AsyncIterator[models.Subject]:
        result = await self._conn.stream(sqlalchemy.text(GET_SUBJECTS_BY_FACULTY), {"p1": facultyId})
        async for row in result:
            yield models.Subject(
                id=row[0],
                name=row[1],
                facultyId=row[2],
                aisid=row[3],
                stage=row[4],
                semester=row[5],
            )

    async def get_subjects_by_stage(self, *, stage: int) -> AsyncIterator[models.Subject]:
        result = await self._conn.stream(sqlalchemy.text(GET_SUBJECTS_BY_STAGE), {"p1": stage})
        async for row in result:
            yield models.Subject(
                id=row[0],
                name=row[1],
                facultyId=row[2],
                aisid=row[3],
                stage=row[4],
                semester=row[5],
            )
