# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
#   sqlc-gen-better-python v0.3.1
from __future__ import annotations

__all__: typing.Sequence[str] = (
    "create_subject",
    "get_subject_by_id",
    "get_subject_by_semester",
    "get_subject_by_semester_faculty_stage",
    "get_subjects",
    "get_subjects_by_faculty",
    "get_subjects_by_stage",
)

import typing

import asyncpg

from . import models


CREATE_SUBJECT: typing.Final[str] = """-- name: createSubject :one
INSERT INTO subjects ("name", "facultyId", "aisid", "stage", "semester", "aisCode")
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING "id"
"""

GET_SUBJECT_BY_ID: typing.Final[str] = """-- name: getSubjectById :one
SELECT id, name, "facultyId", aisid, stage, semester, "aisCode" FROM subjects WHERE "id"=$1
"""

GET_SUBJECT_BY_SEMESTER: typing.Final[str] = """-- name: getSubjectBySemester :many
SELECT id, name, "facultyId", aisid, stage, semester, "aisCode" FROM subjects WHERE "semester"=$1
"""

GET_SUBJECT_BY_SEMESTER_FACULTY_STAGE: typing.Final[str] = """-- name: getSubjectBySemesterFacultyStage :many
SELECT id, name, "facultyId", aisid, stage, semester, "aisCode" FROM subjects WHERE "semester"=$1 AND "facultyId"=$2 AND "stage"=$3
"""

GET_SUBJECTS: typing.Final[str] = """-- name: getSubjects :many
SELECT id, name, "facultyId", aisid, stage, semester, "aisCode" FROM subjects
"""

GET_SUBJECTS_BY_FACULTY: typing.Final[str] = """-- name: getSubjectsByFaculty :many
SELECT id, name, "facultyId", aisid, stage, semester, "aisCode" FROM subjects WHERE "facultyId"=$1
"""

GET_SUBJECTS_BY_STAGE: typing.Final[str] = """-- name: getSubjectsByStage :many
SELECT id, name, "facultyId", aisid, stage, semester, "aisCode" FROM subjects WHERE "stage"=$1
"""


async def create_subject(conn: asyncpg.Connection[asyncpg.Record], *, name: str, facultyId: int, aisid: int, stage: int, semester: int, aisCode: str) -> typing.Optional[int]:
    row = await conn.fetchrow(CREATE_SUBJECT, name, facultyId, aisid, stage, semester, aisCode)
    if row is None:
        return None
    return row[0]


async def get_subject_by_id(conn: asyncpg.Connection[asyncpg.Record], *, id: int) -> typing.Optional[models.Subject]:
    row = await conn.fetchrow(GET_SUBJECT_BY_ID, id)
    if row is None:
        return None
    return models.Subject(id=row[0], name=row[1], facultyId=row[2], aisid=row[3], stage=row[4], semester=row[5], aisCode=row[6])


async def get_subject_by_semester(conn: asyncpg.Connection[asyncpg.Record], *, semester: int) -> typing.Sequence[models.Subject]:
    rows = await conn.fetch(GET_SUBJECT_BY_SEMESTER, semester)
    return_rows: typing.List[models.Subject] = []
    for row in rows:
        return_rows.append(models.Subject(id=row[0], name=row[1], facultyId=row[2], aisid=row[3], stage=row[4], semester=row[5], aisCode=row[6]))
    return return_rows


async def get_subject_by_semester_faculty_stage(conn: asyncpg.Connection[asyncpg.Record], *, semester: int, facultyId: int, stage: int) -> typing.Sequence[models.Subject]:
    rows = await conn.fetch(GET_SUBJECT_BY_SEMESTER_FACULTY_STAGE, semester, facultyId, stage)
    return_rows: typing.List[models.Subject] = []
    for row in rows:
        return_rows.append(models.Subject(id=row[0], name=row[1], facultyId=row[2], aisid=row[3], stage=row[4], semester=row[5], aisCode=row[6]))
    return return_rows


async def get_subjects(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Sequence[models.Subject]:
    rows = await conn.fetch(GET_SUBJECTS)
    return_rows: typing.List[models.Subject] = []
    for row in rows:
        return_rows.append(models.Subject(id=row[0], name=row[1], facultyId=row[2], aisid=row[3], stage=row[4], semester=row[5], aisCode=row[6]))
    return return_rows


async def get_subjects_by_faculty(conn: asyncpg.Connection[asyncpg.Record], *, facultyId: int) -> typing.Sequence[models.Subject]:
    rows = await conn.fetch(GET_SUBJECTS_BY_FACULTY, facultyId)
    return_rows: typing.List[models.Subject] = []
    for row in rows:
        return_rows.append(models.Subject(id=row[0], name=row[1], facultyId=row[2], aisid=row[3], stage=row[4], semester=row[5], aisCode=row[6]))
    return return_rows


async def get_subjects_by_stage(conn: asyncpg.Connection[asyncpg.Record], *, stage: int) -> typing.Sequence[models.Subject]:
    rows = await conn.fetch(GET_SUBJECTS_BY_STAGE, stage)
    return_rows: typing.List[models.Subject] = []
    for row in rows:
        return_rows.append(models.Subject(id=row[0], name=row[1], facultyId=row[2], aisid=row[3], stage=row[4], semester=row[5], aisCode=row[6]))
    return return_rows
