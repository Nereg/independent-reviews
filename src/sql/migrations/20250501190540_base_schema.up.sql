-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.users
(
    id bigserial NOT NULL,
    "aisId" bigint,
    "facultyId" smallint,
    "eduEmail" text,
    "ISICNum" bigint,
    registred timestamp without time zone NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.telegram
(
    "telegramId" bigint NOT NULL,
    "userId" bigint NOT NULL,
    "chatId" bigint NOT NULL,
    PRIMARY KEY ("telegramId")
);

COMMENT ON TABLE public.telegram
    IS 'this is will not be here in v2.0';

CREATE TABLE IF NOT EXISTS public.permissions
(
    "userId" bigint NOT NULL,
    permissions smallint NOT NULL,
    PRIMARY KEY ("userId")
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    id bigserial NOT NULL,
    author bigint NOT NULL,
    text text NOT NULL,
    deleted boolean NOT NULL DEFAULT false,
    language text NOT NULL,
    "subjectId" integer NOT NULL,
    "lectorId" integer,
    "practitionerId" integer NOT NULL,
    "subjectRating" smallint NOT NULL,
    "lectorRating" smallint,
    "practitionerRating" smallint NOT NULL,
    "practitionerReview" text,
    "lectorReview" text,
    "yearBeginning" integer NOT NULL,
    "timestamp" timestamp without time zone NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.lectors
(
    id integer NOT NULL,
    aisid bigint,
    name text NOT NULL,
    surname text NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.practitioners
(
    id integer NOT NULL,
    aisid bigint,
    name text NOT NULL,
    surname text NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.subjects
(
    id integer NOT NULL,
    name text NOT NULL,
    "facultyId" smallint NOT NULL,
    aisid bigint,
    stage smallint NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.faculties
(
    id smallint NOT NULL,
    university text NOT NULL,
    name text NOT NULL,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT "facultyIdFk" FOREIGN KEY ("facultyId")
    REFERENCES public.faculties (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.telegram
    ADD CONSTRAINT "userIdFk" FOREIGN KEY ("userId")
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.permissions
    ADD CONSTRAINT "userIdFk" FOREIGN KEY ("userId")
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT "authorFk" FOREIGN KEY (author)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT "subjectIdFk" FOREIGN KEY ("subjectId")
    REFERENCES public.subjects (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT "practitionerIdFk" FOREIGN KEY ("practitionerId")
    REFERENCES public.practitioners (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT "lectorIdFk" FOREIGN KEY ("lectorId")
    REFERENCES public.lectors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.subjects
    ADD CONSTRAINT "facultyIdFk" FOREIGN KEY ("facultyId")
    REFERENCES public.faculties (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;