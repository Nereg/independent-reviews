# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: users.sql
from typing import Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from . import models


GET_USER = """-- name: get_user \\:one
SELECT id, "aisId", "facultyId", "eduEmail", "ISICNum", registred FROM users WHERE "id"=:p1
"""


GET_USER_BY_TELEGRAM_ID = """-- name: get_user_by_telegram_id \\:one
SELECT "userId" FROM telegram WHERE "telegramId" = :p1
"""


REGISTER_TELEGRAM = """-- name: register_telegram \\:one
WITH tmp_id AS (
	INSERT INTO users (registred)
	VALUES (timezone('utc', now()))
	RETURNING id
)
INSERT INTO public.telegram(
	"telegramId", "userId", "chatId")
	SELECT :p1,
    id,
    :p2 FROM tmp_id
    RETURNING "userId"
"""


UPDATE_PERMISSIONS = """-- name: update_permissions \\:exec
INSERT INTO permissions ("userId", "permissions") 
VALUES (:p1, :p2)
ON CONFLICT ("userId") DO UPDATE 
  SET permissions = excluded.permissions
"""


VERIFY_USER_BY_ISIC = """-- name: verify_user_by_isic \\:exec
UPDATE users SET 
    "ISICNum"=:p1,
    "facultyId"=:p2,
    "aisId"=:p3
    WHERE "id"=:p4
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_user(self, *, id: int) -> Optional[models.User]:
        row = (await self._conn.execute(sqlalchemy.text(GET_USER), {"p1": id})).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            aisId=row[1],
            facultyId=row[2],
            eduEmail=row[3],
            ISICNum=row[4],
            registred=row[5],
        )

    async def get_user_by_telegram_id(self, *, telegramId: int) -> Optional[int]:
        row = (await self._conn.execute(sqlalchemy.text(GET_USER_BY_TELEGRAM_ID), {"p1": telegramId})).first()
        if row is None:
            return None
        return row[0]

    async def register_telegram(self, *, telegramId: int, chatId: int) -> Optional[int]:
        row = (await self._conn.execute(sqlalchemy.text(REGISTER_TELEGRAM), {"p1": telegramId, "p2": chatId})).first()
        if row is None:
            return None
        return row[0]

    async def update_permissions(self, *, userId: int, permissions: int) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_PERMISSIONS), {"p1": userId, "p2": permissions})

    async def verify_user_by_isic(self, *, ISICNum: Optional[int], facultyId: Optional[int], aisId: Optional[int], id: int) -> None:
        await self._conn.execute(sqlalchemy.text(VERIFY_USER_BY_ISIC), {
            "p1": ISICNum,
            "p2": facultyId,
            "p3": aisId,
            "p4": id,
        })
