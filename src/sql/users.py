# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
#   sqlc-gen-better-python v0.3.1
from __future__ import annotations

__all__: typing.Sequence[str] = (
    "get_user",
    "get_user_by_telegram_id",
    "register_telegram",
    "update_permissions",
    "verify_user_by_i_s_i_c",
)

import typing

import asyncpg

from . import models


GET_USER: typing.Final[str] = """-- name: getUser :one
SELECT id, "aisId", "facultyId", "eduEmail", "ISICNum", registred FROM users WHERE "id"=$1
"""

GET_USER_BY_TELEGRAM_ID: typing.Final[str] = """-- name: getUserByTelegramId :one
SELECT "userId" FROM telegram WHERE "telegramId" = $1
"""

REGISTER_TELEGRAM: typing.Final[str] = """-- name: registerTelegram :one
WITH tmp_id AS (
	INSERT INTO users (registred)
	VALUES (timezone('utc', now()))
	RETURNING id
)
INSERT INTO public.telegram(
	"telegramId", "userId", "chatId")
	SELECT $1,
    id,
    $2 FROM tmp_id
    RETURNING "userId"
"""

UPDATE_PERMISSIONS: typing.Final[str] = """-- name: updatePermissions :exec
INSERT INTO permissions ("userId", "permissions") 
VALUES ($1, $2)
ON CONFLICT ("userId") DO UPDATE 
  SET permissions = excluded.permissions
"""

VERIFY_USER_BY_I_S_I_C: typing.Final[str] = """-- name: verifyUserByISIC :exec
UPDATE users SET 
    "ISICNum"=$1,
    "facultyId"=$2,
    "aisId"=$3
    WHERE "id"=$4
"""


async def get_user(conn: asyncpg.Connection[asyncpg.Record], *, id: int) -> typing.Optional[models.User]:
    row = await conn.fetchrow(GET_USER, id)
    if row is None:
        return None
    return models.User(id=row[0], aisId=row[1], facultyId=row[2], eduEmail=row[3], ISICNum=row[4], registred=row[5])


async def get_user_by_telegram_id(conn: asyncpg.Connection[asyncpg.Record], *, telegramId: int) -> typing.Optional[int]:
    row = await conn.fetchrow(GET_USER_BY_TELEGRAM_ID, telegramId)
    if row is None:
        return None
    return row[0]


async def register_telegram(conn: asyncpg.Connection[asyncpg.Record], *, telegramId: int, chatId: int) -> typing.Optional[int]:
    row = await conn.fetchrow(REGISTER_TELEGRAM, telegramId, chatId)
    if row is None:
        return None
    return row[0]


async def update_permissions(conn: asyncpg.Connection[asyncpg.Record], *, userId: int, permissions: int) -> None:
    await conn.execute(UPDATE_PERMISSIONS, userId, permissions)


async def verify_user_by_i_s_i_c(conn: asyncpg.Connection[asyncpg.Record], *, ISICNum: int, facultyId: int, aisId: int, id: int) -> None:
    await conn.execute(VERIFY_USER_BY_I_S_I_C, ISICNum, facultyId, aisId, id)
