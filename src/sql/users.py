# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
#   sqlc-gen-better-python v0.4.3
"""Module containing queries from file users.sql."""
from __future__ import annotations

__all__: collections.abc.Sequence[str] = (
    "get_user",
    "get_user_by_telegram_id",
    "register_telegram",
    "update_permissions",
    "verify_user_by_isic",
)

import dataclasses
import datetime
import operator
import typing

if typing.TYPE_CHECKING:
    import asyncpg
    import asyncpg.cursor
    import collections.abc

    QueryResultsArgsType: typing.TypeAlias = int | float | str | memoryview | datetime.date | datetime.time | datetime.datetime | datetime.timedelta | None

    ConnectionLike: typing.TypeAlias = asyncpg.Connection[asyncpg.Record] | asyncpg.pool.PoolConnectionProxy[asyncpg.Record]

from . import models


GET_USER: typing.Final[str] = """-- name: getUser :one
SELECT id, "aisId", "facultyId", "eduEmail", "ISICNum", registred FROM users WHERE "id"=$1
"""

GET_USER_BY_TELEGRAM_ID: typing.Final[str] = """-- name: getUserByTelegramId :one
SELECT "userId" FROM telegram WHERE "telegramId" = $1
"""

REGISTER_TELEGRAM: typing.Final[str] = """-- name: registerTelegram :one
WITH tmp_id AS (
	INSERT INTO users (registred)
	VALUES (timezone('utc', now()))
	RETURNING id
)
INSERT INTO public.telegram(
	"telegramId", "userId", "chatId")
	SELECT $1,
    id,
    $2 FROM tmp_id
    RETURNING "userId"
"""

UPDATE_PERMISSIONS: typing.Final[str] = """-- name: updatePermissions :exec
INSERT INTO permissions ("userId", "permissions") 
VALUES ($1, $2)
ON CONFLICT ("userId") DO UPDATE 
  SET permissions = excluded.permissions
"""

VERIFY_USER_BY_ISIC: typing.Final[str] = """-- name: verifyUserByIsic :exec
UPDATE users SET 
    "ISICNum"=$1,
    "facultyId"=$2,
    "aisId"=$3
    WHERE "id"=$4
"""


async def get_user(conn: ConnectionLike, *, id_: int) -> models.User | None:
    """Fetch one from the db using the SQL query with `name: getUser :one`.

    Args:
        conn:
            Connection object of type `ConnectionLike` used to execute the query.
        id_: int.

    Returns:
        Result of type `models.User` fetched from the db. Will be `None` if not found.
    """
    row = await conn.fetchrow(GET_USER, id_)
    if row is None:
        return None
    return models.User(id=row[0], aisId=row[1], facultyId=row[2], eduEmail=row[3], ISICNum=row[4], registred=row[5])


async def get_user_by_telegram_id(conn: ConnectionLike, *, telegramId: int) -> int | None:
    """Fetch one from the db using the SQL query with `name: getUserByTelegramId :one`.

    Args:
        conn:
            Connection object of type `ConnectionLike` used to execute the query.
        telegramId: int.

    Returns:
        Result of type `int` fetched from the db. Will be `None` if not found.
    """
    row = await conn.fetchrow(GET_USER_BY_TELEGRAM_ID, telegramId)
    if row is None:
        return None
    return row[0]


async def register_telegram(conn: ConnectionLike, *, telegramId: int, chatId: int) -> int | None:
    """Fetch one from the db using the SQL query with `name: registerTelegram :one`.

    Args:
        conn:
            Connection object of type `ConnectionLike` used to execute the query.
        telegramId: int.
        chatId: int.

    Returns:
        Result of type `int` fetched from the db. Will be `None` if not found.
    """
    row = await conn.fetchrow(REGISTER_TELEGRAM, telegramId, chatId)
    if row is None:
        return None
    return row[0]


async def update_permissions(conn: ConnectionLike, *, userId: int, permissions: int) -> None:
    """Execute SQL query with `name: updatePermissions :exec`.

    Args:
        conn:
            Connection object of type `ConnectionLike` used to execute the query.
        userId: int.
        permissions: int.
    """
    await conn.execute(UPDATE_PERMISSIONS, userId, permissions)


async def verify_user_by_isic(conn: ConnectionLike, *, ISICNum: int | None, facultyId: int | None, aisId: int | None, id_: int) -> None:
    """Execute SQL query with `name: verifyUserByIsic :exec`.

    Args:
        conn:
            Connection object of type `ConnectionLike` used to execute the query.
        ISICNum: int | None.
        facultyId: int | None.
        aisId: int | None.
        id_: int.
    """
    await conn.execute(VERIFY_USER_BY_ISIC, ISICNum, facultyId, aisId, id_)
