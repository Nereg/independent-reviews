# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
#   sqlc-gen-better-python v0.4.2
"""Module containing queries from file reviews.sql."""
from __future__ import annotations

__all__: collections.abc.Sequence[str] = (
    "QueryResults",
    "getReviewByIdRow",
    "getReviewsByIdsRow",
    "get_review_by_id",
    "get_reviews_by_ids",
)

import dataclasses
import datetime
import operator
import typing

if typing.TYPE_CHECKING:
    import asyncpg
    import asyncpg.cursor
    import collections.abc

    QueryResultsArgsType: typing.TypeAlias = int | float | str | memoryview | datetime.date | datetime.time | datetime.datetime | datetime.timedelta | None

    ConnectionLike: typing.TypeAlias = asyncpg.Connection[asyncpg.Record] | asyncpg.pool.PoolConnectionProxy[asyncpg.Record]

from . import models


@dataclasses.dataclass()
class getReviewByIdRow:
    """Model representing getReviewByIdRow.

    Attributes:
        id: int
        author: int
        subjectId: int
        text: str
        deleted: bool
        language: str
        practitionerId: int
        subjectRating: int
        lectorRating: int | None
        practitionerRating: int
        practitionerReview: str | None
        lectorReview: str | None
        yearBeginning: int
        timestamp: datetime.datetime
        mark: int | None
        name: str
        facultyId: int
        aisid: int
        stage: int
        semester: int
        aisCode: str
    """

    id: int
    author: int
    subjectId: int
    text: str
    deleted: bool
    language: str
    practitionerId: int
    subjectRating: int
    lectorRating: int | None
    practitionerRating: int
    practitionerReview: str | None
    lectorReview: str | None
    yearBeginning: int
    timestamp: datetime.datetime
    mark: int | None
    name: str
    facultyId: int
    aisid: int
    stage: int
    semester: int
    aisCode: str


@dataclasses.dataclass()
class getReviewsByIdsRow:
    """Model representing getReviewsByIdsRow.

    Attributes:
        id: int
        author: int
        subjectId: int
        text: str
        deleted: bool
        language: str
        practitionerId: int
        subjectRating: int
        lectorRating: int | None
        practitionerRating: int
        practitionerReview: str | None
        lectorReview: str | None
        yearBeginning: int
        timestamp: datetime.datetime
        mark: int | None
        name: str
        facultyId: int
        aisid: int
        stage: int
        semester: int
        aisCode: str
    """

    id: int
    author: int
    subjectId: int
    text: str
    deleted: bool
    language: str
    practitionerId: int
    subjectRating: int
    lectorRating: int | None
    practitionerRating: int
    practitionerReview: str | None
    lectorReview: str | None
    yearBeginning: int
    timestamp: datetime.datetime
    mark: int | None
    name: str
    facultyId: int
    aisid: int
    stage: int
    semester: int
    aisCode: str


GET_REVIEW_BY_ID: typing.Final[str] = """-- name: getReviewById :one
SELECT reviews."id", reviews."author", reviews."subjectId", reviews."text", reviews."deleted", reviews."language", reviews."practitionerId", reviews."subjectRating", reviews."lectorRating", reviews."practitionerRating", reviews."practitionerReview", reviews."lectorReview", reviews."yearBeginning", reviews."timestamp", reviews."mark", subjects."name", subjects."facultyId", subjects."aisid", subjects."stage", subjects."semester", subjects."aisCode"
FROM public.reviews
INNER JOIN public.subjects ON subjects.id = reviews."subjectId"
WHERE reviews."id" = $1
"""

GET_REVIEWS_BY_IDS: typing.Final[str] = """-- name: getReviewsByIds :many
SELECT reviews."id", reviews."author", reviews."subjectId", reviews."text", reviews."deleted", reviews."language", reviews."practitionerId", reviews."subjectRating", reviews."lectorRating", reviews."practitionerRating", reviews."practitionerReview", reviews."lectorReview", reviews."yearBeginning", reviews."timestamp", reviews."mark", subjects."name", subjects."facultyId", subjects."aisid", subjects."stage", subjects."semester", subjects."aisCode"
FROM public.reviews
INNER JOIN public.subjects ON subjects.id = reviews."subjectId"
WHERE reviews."id" IN ($1)
"""


T = typing.TypeVar("T")


class QueryResults(typing.Generic[T]):
    """Helper class that allows both iteration and normal fetching of data from the db."""

    __slots__ = ("_args", "_conn", "_cursor", "_decode_hook", "_iterator", "_sql")

    def __init__(
        self,
        conn: ConnectionLike,
        sql: str,
        decode_hook: collections.abc.Callable[[asyncpg.Record], T],
        *args: QueryResultsArgsType,
    ) -> None:
        """Initialize the QueryResults instance.

        Args:
            conn:
                The connection object of type `ConnectionLike` used to execute queries.
            sql:
                The SQL statement that will be executed when fetching/iterating.
            decode_hook:
                A callback that turns an `asyncpg.Record` object into `T` that will be returned.
            *args:
                Arguments that should be sent when executing the sql query.
        """
        self._conn = conn
        self._sql = sql
        self._decode_hook = decode_hook
        self._args = args
        self._cursor: asyncpg.cursor.CursorFactory[asyncpg.Record] | None = None
        self._iterator: asyncpg.cursor.CursorIterator[asyncpg.Record] | None = None

    def __aiter__(self) -> QueryResults[T]:
        """Initialize iteration support for `async for`.

        Returns:
            Self as an asynchronous iterator.
        """
        return self

    def __await__(
        self,
    ) -> collections.abc.Generator[None, None, collections.abc.Sequence[T]]:
        """Allow `await` on the object to return all rows as a fully decoded sequence.

        Returns:
            A sequence of decoded objects of type `T`.
        """
        async def _wrapper() -> collections.abc.Sequence[T]:
            result = await self._conn.fetch(self._sql, *self._args)
            return [self._decode_hook(row) for row in result]
        return _wrapper().__await__()

    async def __anext__(self) -> T:
        """Yield the next item in the query result using an asyncpg cursor.

        Returns:
            The next decoded result of type `T`.

        Raises:
            StopAsyncIteration: When no more records are available.
        """
        if self._cursor is None or self._iterator is None:
            self._cursor = self._conn.cursor(self._sql, *self._args)
            self._iterator = self._cursor.__aiter__()
        try:
            record = await self._iterator.__anext__()
        except StopAsyncIteration:
            self._cursor = None
            self._iterator = None
            raise
        return self._decode_hook(record)


async def get_review_by_id(conn: ConnectionLike, *, id_: int) -> getReviewByIdRow | None:
    """Fetch one from the db using the SQL query with `name: getReviewById :one`.

    Args:
        conn:
            Connection object of type `ConnectionLike` used to execute the query.
        id_: int.

    Returns:
        Result of type `getReviewByIdRow` fetched from the db. Will be `None` if not found.
    """
    row = await conn.fetchrow(GET_REVIEW_BY_ID, id_)
    if row is None:
        return None
    return getReviewByIdRow(id=row[0], author=row[1], subjectId=row[2], text=row[3], deleted=row[4], language=row[5], practitionerId=row[6], subjectRating=row[7], lectorRating=row[8], practitionerRating=row[9], practitionerReview=row[10], lectorReview=row[11], yearBeginning=row[12], timestamp=row[13], mark=row[14], name=row[15], facultyId=row[16], aisid=row[17], stage=row[18], semester=row[19], aisCode=row[20])


def get_reviews_by_ids(conn: ConnectionLike, *, id_: int) -> QueryResults[getReviewsByIdsRow]:
    """Fetch many from the db using the SQL query with `name: getReviewsByIds :many`.

    Args:
        conn:
            Connection object of type `ConnectionLike` used to execute the query.
        id_: int.

    Returns:
        Helper class of type `QueryResults[getReviewsByIdsRow]` that allows both iteration and normal fetching of data from the db.
    """
    def _decode_hook(row: asyncpg.Record) -> getReviewsByIdsRow:
        return getReviewsByIdsRow(id=row[0], author=row[1], subjectId=row[2], text=row[3], deleted=row[4], language=row[5], practitionerId=row[6], subjectRating=row[7], lectorRating=row[8], practitionerRating=row[9], practitionerReview=row[10], lectorReview=row[11], yearBeginning=row[12], timestamp=row[13], mark=row[14], name=row[15], facultyId=row[16], aisid=row[17], stage=row[18], semester=row[19], aisCode=row[20])
    return QueryResults[getReviewsByIdsRow](conn, GET_REVIEWS_BY_IDS, _decode_hook, id_)
